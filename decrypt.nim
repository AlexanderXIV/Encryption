const save_box: array[256, uint8] = [
  0x63'u8, 0x7C'u8, 0x77'u8, 0x7B'u8, 0xF2'u8, 0x6B'u8, 0x6F'u8, 0xC5'u8, 0x30'u8, 0x01'u8, 0x67'u8, 0x2B'u8, 0xFE'u8, 0xD7'u8, 0xAB'u8, 0x76'u8,
  0xCA'u8, 0x82'u8, 0xC9'u8, 0x7D'u8, 0xFA'u8, 0x59'u8, 0x47'u8, 0xF0'u8, 0xAD'u8, 0xD4'u8, 0xA2'u8, 0xAF'u8, 0x9C'u8, 0xA4'u8, 0x72'u8, 0xC0'u8,
  0xB7'u8, 0xFD'u8, 0x93'u8, 0x26'u8, 0x36'u8, 0x3F'u8, 0xF7'u8, 0xCC'u8, 0x34'u8, 0xA5'u8, 0xE5'u8, 0xF1'u8, 0x71'u8, 0xD8'u8, 0x31'u8, 0x15'u8,
  0x04'u8, 0xC7'u8, 0x23'u8, 0xC3'u8, 0x18'u8, 0x96'u8, 0x05'u8, 0x9A'u8, 0x07'u8, 0x12'u8, 0x80'u8, 0xE2'u8, 0xEB'u8, 0x27'u8, 0xB2'u8, 0x75'u8,
  0x09'u8, 0x83'u8, 0x2C'u8, 0x1A'u8, 0x1B'u8, 0x6E'u8, 0x5A'u8, 0xA0'u8, 0x52'u8, 0x3B'u8, 0xD6'u8, 0xB3'u8, 0x29'u8, 0xE3'u8, 0x2F'u8, 0x84'u8,
  0x53'u8, 0xD1'u8, 0x00'u8, 0xED'u8, 0x20'u8, 0xFC'u8, 0xB1'u8, 0x5B'u8, 0x6A'u8, 0xCB'u8, 0xBE'u8, 0x39'u8, 0x4A'u8, 0x4C'u8, 0x58'u8, 0xCF'u8,
  0xD0'u8, 0xEF'u8, 0xAA'u8, 0xFB'u8, 0x43'u8, 0x4D'u8, 0x33'u8, 0x85'u8, 0x45'u8, 0xF9'u8, 0x02'u8, 0x7F'u8, 0x50'u8, 0x3C'u8, 0x9F'u8, 0xA8'u8,
  0x51'u8, 0xA3'u8, 0x40'u8, 0x8F'u8, 0x92'u8, 0x9D'u8, 0x38'u8, 0xF5'u8, 0xBC'u8, 0xB6'u8, 0xDA'u8, 0x21'u8, 0x10'u8, 0xFF'u8, 0xF3'u8, 0xD2'u8,
  0xCD'u8, 0x0C'u8, 0x13'u8, 0xEC'u8, 0x5F'u8, 0x97'u8, 0x44'u8, 0x17'u8, 0xC4'u8, 0xA7'u8, 0x7E'u8, 0x3D'u8, 0x64'u8, 0x5D'u8, 0x19'u8, 0x73'u8,
  0x60'u8, 0x81'u8, 0x4F'u8, 0xDC'u8, 0x22'u8, 0x2A'u8, 0x90'u8, 0x88'u8, 0x46'u8, 0xEE'u8, 0xB8'u8, 0x14'u8, 0xDE'u8, 0x5E'u8, 0x0B'u8, 0xDB'u8,
  0xE0'u8, 0x32'u8, 0x3A'u8, 0x0A'u8, 0x49'u8, 0x06'u8, 0x24'u8, 0x5C'u8, 0xC2'u8, 0xD3'u8, 0xAC'u8, 0x62'u8, 0x91'u8, 0x95'u8, 0xE4'u8, 0x79'u8,
  0xE7'u8, 0xC8'u8, 0x37'u8, 0x6D'u8, 0x8D'u8, 0xD5'u8, 0x4E'u8, 0xA9'u8, 0x6C'u8, 0x56'u8, 0xF4'u8, 0xEA'u8, 0x65'u8, 0x7A'u8, 0xAE'u8, 0x08'u8,
  0xBA'u8, 0x78'u8, 0x25'u8, 0x2E'u8, 0x1C'u8, 0xA6'u8, 0xB4'u8, 0xC6'u8, 0xE8'u8, 0xDD'u8, 0x74'u8, 0x1F'u8, 0x4B'u8, 0xBD'u8, 0x8B'u8, 0x8A'u8,
  0x70'u8, 0x3E'u8, 0xB5'u8, 0x66'u8, 0x48'u8, 0x03'u8, 0xF6'u8, 0x0E'u8, 0x61'u8, 0x35'u8, 0x57'u8, 0xB9'u8, 0x86'u8, 0xC1'u8, 0x1D'u8, 0x9E'u8,
  0xE1'u8, 0xF8'u8, 0x98'u8, 0x11'u8, 0x69'u8, 0xD9'u8, 0x8E'u8, 0x94'u8, 0x9B'u8, 0x1E'u8, 0x87'u8, 0xE9'u8, 0xCE'u8, 0x55'u8, 0x28'u8, 0xDF'u8,
  0x8C'u8, 0xA1'u8, 0x89'u8, 0x0D'u8, 0xBF'u8, 0xE6'u8, 0x42'u8, 0x68'u8, 0x41'u8, 0x99'u8, 0x2D'u8, 0x0F'u8, 0xB0'u8, 0x54'u8, 0xBB'u8, 0x16'u8 ]

const inv_save_box: array[256, uint8] = [
  0x52'u8, 0x09'u8, 0x6a'u8, 0xd5'u8, 0x30'u8, 0x36'u8, 0xa5'u8, 0x38'u8, 0xbf'u8, 0x40'u8, 0xa3'u8, 0x9e'u8, 0x81'u8, 0xf3'u8, 0xd7'u8, 0xfb'u8,
  0x7c'u8, 0xe3'u8, 0x39'u8, 0x82'u8, 0x9b'u8, 0x2f'u8, 0xff'u8, 0x87'u8, 0x34'u8, 0x8e'u8, 0x43'u8, 0x44'u8, 0xc4'u8, 0xde'u8, 0xe9'u8, 0xcb'u8,
  0x54'u8, 0x7b'u8, 0x94'u8, 0x32'u8, 0xa6'u8, 0xc2'u8, 0x23'u8, 0x3d'u8, 0xee'u8, 0x4c'u8, 0x95'u8, 0x0b'u8, 0x42'u8, 0xfa'u8, 0xc3'u8, 0x4e'u8,
  0x08'u8, 0x2e'u8, 0xa1'u8, 0x66'u8, 0x28'u8, 0xd9'u8, 0x24'u8, 0xb2'u8, 0x76'u8, 0x5b'u8, 0xa2'u8, 0x49'u8, 0x6d'u8, 0x8b'u8, 0xd1'u8, 0x25'u8,
  0x72'u8, 0xf8'u8, 0xf6'u8, 0x64'u8, 0x86'u8, 0x68'u8, 0x98'u8, 0x16'u8, 0xd4'u8, 0xa4'u8, 0x5c'u8, 0xcc'u8, 0x5d'u8, 0x65'u8, 0xb6'u8, 0x92'u8,
  0x6c'u8, 0x70'u8, 0x48'u8, 0x50'u8, 0xfd'u8, 0xed'u8, 0xb9'u8, 0xda'u8, 0x5e'u8, 0x15'u8, 0x46'u8, 0x57'u8, 0xa7'u8, 0x8d'u8, 0x9d'u8, 0x84'u8,
  0x90'u8, 0xd8'u8, 0xab'u8, 0x00'u8, 0x8c'u8, 0xbc'u8, 0xd3'u8, 0x0a'u8, 0xf7'u8, 0xe4'u8, 0x58'u8, 0x05'u8, 0xb8'u8, 0xb3'u8, 0x45'u8, 0x06'u8,
  0xd0'u8, 0x2c'u8, 0x1e'u8, 0x8f'u8, 0xca'u8, 0x3f'u8, 0x0f'u8, 0x02'u8, 0xc1'u8, 0xaf'u8, 0xbd'u8, 0x03'u8, 0x01'u8, 0x13'u8, 0x8a'u8, 0x6b'u8,
  0x3a'u8, 0x91'u8, 0x11'u8, 0x41'u8, 0x4f'u8, 0x67'u8, 0xdc'u8, 0xea'u8, 0x97'u8, 0xf2'u8, 0xcf'u8, 0xcE'u8, 0xf0'u8, 0xb4'u8, 0xe6'u8, 0x73'u8,
  0x96'u8, 0xac'u8, 0x74'u8, 0x22'u8, 0xe7'u8, 0xad'u8, 0x35'u8, 0x85'u8, 0xe2'u8, 0xf9'u8, 0x37'u8, 0xe8'u8, 0x1c'u8, 0x75'u8, 0xdf'u8, 0x6e'u8,
  0x47'u8, 0xf1'u8, 0x1a'u8, 0x71'u8, 0x1d'u8, 0x29'u8, 0xc5'u8, 0x89'u8, 0x6f'u8, 0xb7'u8, 0x62'u8, 0x0e'u8, 0xaa'u8, 0x18'u8, 0xbe'u8, 0x1b'u8,
  0xfc'u8, 0x56'u8, 0x3e'u8, 0x4b'u8, 0xc6'u8, 0xd2'u8, 0x79'u8, 0x20'u8, 0x9a'u8, 0xdb'u8, 0xc0'u8, 0xfe'u8, 0x78'u8, 0xcd'u8, 0x5a'u8, 0xf4'u8,
  0x1f'u8, 0xdd'u8, 0xa8'u8, 0x33'u8, 0x88'u8, 0x07'u8, 0xc7'u8, 0x31'u8, 0xb1'u8, 0x12'u8, 0x10'u8, 0x59'u8, 0x27'u8, 0x80'u8, 0xec'u8, 0x5f'u8,
  0x60'u8, 0x51'u8, 0x7f'u8, 0xa9'u8, 0x19'u8, 0xb5'u8, 0x4a'u8, 0x0d'u8, 0x2d'u8, 0xe5'u8, 0x7a'u8, 0x9f'u8, 0x93'u8, 0xc9'u8, 0x9c'u8, 0xef'u8,
  0xa0'u8, 0xe0'u8, 0x3b'u8, 0x4d'u8, 0xae'u8, 0x2a'u8, 0xf5'u8, 0xb0'u8, 0xc8'u8, 0xeb'u8, 0xbb'u8, 0x3c'u8, 0x83'u8, 0x53'u8, 0x99'u8, 0x61'u8,
  0x17'u8, 0x2b'u8, 0x04'u8, 0x7e'u8, 0xba'u8, 0x77'u8, 0xd6'u8, 0x26'u8, 0xe1'u8, 0x69'u8, 0x14'u8, 0x63'u8, 0x55'u8, 0x21'u8, 0x0c'u8, 0x7d'u8 ]

const rcon: array[10, byte] = [ 0x01'u8, 0x02'u8, 0x04'u8, 0x08'u8, 0x10'u8, 0x20'u8, 0x40'u8, 0x80'u8, 0x1B'u8, 0x36'u8 ]

const inv_matrix: array[16, uint8] = [
  14'u8, 11'u8, 13'u8, 9'u8,
  9'u8, 14'u8, 11'u8, 13'u8,
  13'u8, 9'u8, 14'u8, 11'u8,
  11'u8, 13'u8, 9'u8, 14'u8 ]

const N = 16
const rounds = 9

type Block = array[N, uint8]

proc mul2(n1: uint8): uint8 =
  if n1 >= 0x80:
    return (2 * (n1 - 0x80'u8)) xor 0x1b
  return 2 * n1

proc mul(n1, n2: uint8): uint8 =
  if n2 == 9:
    return n1.mul2().mul2().mul2() xor n1
  elif n2 == 11:
    return (n1.mul2().mul2() xor n1).mul2() xor n1
  elif n2 == 13:
    return (n1.mul2() xor n1).mul2().mul2() xor n1
  elif n2 == 14:
    return ((n1.mul2() xor n1).mul2() xor n1).mul2()

proc makeRoundKey(data: Block, count: int): Block =
  result[0] = save_box[data[13]] xor rcon[count] xor data[0]
  result[1] = save_box[data[14]] xor data[1]
  result[2] = save_box[data[15]] xor data[2]
  result[3] = save_box[data[12]] xor data[3]

  for i in 4..<16:
    result[i] = result[i - 4] xor data[i]

proc inv_sub_bytes(data: var Block) =
  for i, item in data:
    data[i] = inv_save_box[item]

proc inv_shift_rows(data: var Block) =
  var tmp = data[1]
  data[1] = data[13]
  data[13] = data[9]
  data[9] = data[5]
  data[5] = tmp

  tmp = data[2]
  data[2] = data[10]
  data[10] = tmp

  tmp = data[3]
  data[3] = data[7]
  data[7] = data[11]
  data[11] = data[15]
  data[15] = tmp

  tmp = data[6]
  data[6] = data[14]
  data[14] = tmp

proc inv_mix_columns(n1: Block): Block =
  var x, y: int
  for i in 0..<16:
    result[i] = mul(n1[y], inv_matrix[x]) xor mul(n1[y + 1], inv_matrix[x + 1]) xor mul(n1[y + 2], inv_matrix[x + 2]) xor mul(n1[y + 3], inv_matrix[x + 3])
    if x == 12:
      x = 0
      y += 4
    else:
      x += 4

proc add_round_key(data: var Block, key: Block) =
  for i, item in key:
    data[i] = data[i] xor item

proc decrypt*(data, key: Block): Block =
  var
    round_keys: array[rounds + 1, Block]
    round_key = key

  for i in 0..rounds:
    round_keys[i] = makeRoundKey(round_key, i)
    round_key = round_keys[i]

  result = data

  result.add_round_key(round_keys[rounds])
  result.inv_shift_rows()
  result.inv_sub_bytes()

  for i in countdown(rounds - 1, 0):
    result.add_round_key(round_keys[i])
    result = inv_mix_columns(result)
    result.inv_shift_rows()
    result.inv_sub_bytes()

  result.add_round_key(key)